[delayed_gcode _ALLOW_RAWPARAMS_PYTHON_MACROS]
initial_duration: 0.00001
gcode:
	{% set builtins = printer.__getitem__.__globals__["__builtins__"] %}
	{% set exec = builtins.exec %}
	{( exec('''
	gcode = printer.lookup_object("gcode")
	gcode_macro = printer.lookup_object("gcode_macro")
	gcode_macro._action_respond_info("diocane")
	def get_extended_params_patched(self, gcmd):
	___ gcode_macro = self.printer.lookup_object("gcode_macro")
	___ if gcmd.get_command() in ("PY", "PYS"):
	___ ___ return gcmd
	___ return type(self)._get_extended_params(self, gcmd)
	gcode._get_extended_params = get_extended_params_patched.__get__(gcode, type(gcode))
	'''.replace('___ ', '\t'), {}, {"printer": printer.printer}) or True) and ''}

[delayed_gcode _SETUP_SCRIPTING]
initial_duration: 0.00001
gcode:
	{% set builtins = printer.__getitem__.__globals__["__builtins__"] %}
	{% set exec = builtins.exec %}
	{( exec('''
	macro = printer.printer.lookup_object("gcode_macro PYTHON")
	macro._scripts = {}
	macro._script_names = {}
	macro._script_params = {}
	# 
	# make_script() method of the macro object
	def make_script(self, name=None, **params):
	___ import random
	___ script_id = random.randint(0, 9999999)
	___ if name is None:
	___ ___ name = f"{script_id}"
	___ self._scripts[script_id] = ""
	___ self._script_names[script_id] = name
	___ self._script_params[script_id] = params
	___ return script_id
	# 
	# make_script() method for the printer object (GetStatusWrapper)
	def gsw_make_script(self, name=None, **params):
	___ macro = self.printer.lookup_object("gcode_macro PYTHON")
	___ return macro.make_script(name, **params)
	# 
	# Inject methods
	macro.make_script = make_script.__get__(macro, type(macro))
	printer.printer.make_script = macro.make_script
	printer.make_script = gsw_make_script.__get__(printer, type(printer))
	type(printer).make_script = gsw_make_script
	# 
	# Set up Kalico helpers
	if getattr(macro, "_helpers", None) == None:
	___ class Helpers:
	___ ___ import functools
	___ ___ def __init__(self, printer_wrapper):
	___ ___ ___ self.printer_wrapper = printer_wrapper
	___ ___ ___ self.printer = printer_wrapper.printer
	___ ___ ___ self.gcode = self.printer.lookup_object("gcode")
	___ ___ ___ self.gcode_macro = self.printer.lookup_object("gcode_macro")
	___ ___ def get_helpers(self):
	___ ___ ___ import math
	___ ___ ___ return {
	___ ___ ___ ___ "printer": self.printer_wrapper,
	___ ___ ___ ___ "emit": self._action_emit,
	___ ___ ___ ___ "wait_while": self._action_wait_while,
	___ ___ ___ ___ "wait_until": self._action_wait_until,
	___ ___ ___ ___ "wait_moves": self._action_wait_moves,
	___ ___ ___ ___ "blocking": self._action_blocking,
	___ ___ ___ ___ "sleep": self._action_sleep,
	___ ___ ___ ___ "set_gcode_variable": self._action_set_gcode_variable,
	___ ___ ___ ___ "emergency_stop": self.gcode_macro._action_emergency_stop,
	___ ___ ___ ___ "respond_info": self.gcode_macro._action_respond_info,
	___ ___ ___ ___ "raise_error": self.gcode_macro._action_raise_error,
	___ ___ ___ ___ "call_remote_method": self.gcode_macro._action_call_remote_method,
	___ ___ ___ ___ "action_emergency_stop": self.gcode_macro._action_emergency_stop,
	___ ___ ___ ___ "action_respond_info": self.gcode_macro._action_respond_info,
	___ ___ ___ ___ "action_raise_error": self.gcode_macro._action_raise_error,
	___ ___ ___ ___ "action_call_remote_method": self.gcode_macro._action_call_remote_method,
	___ ___ ___ ___ "math": math,
	___ ___ ___ }
	___ ___ def _action_emit(self, gcode):
	___ ___ ___ self.gcode.run_script_from_command(gcode)
	___ ___ def _action_wait_while(self, check):
	___ ___ ___ def inner(eventtime):
	___ ___ ___ ___ return check()
	___ ___ ___ self.printer.wait_while(check)
	___ ___ def _action_wait_until(self, check):
	___ ___ ___ def inner(eventtime):
	___ ___ ___ ___ return not check()
	___ ___ ___ self.printer.wait_while(inner)
	___ ___ def _action_wait_moves(self):
	___ ___ ___ if self.toolhead is None:
	___ ___ ___ ___ self.toolhead = self.printer.lookup_object("toolhead")
	___ ___ ___ self.toolhead.wait_moves()
	___ ___ def _action_blocking(self, func):
	___ ___ ___ completion = self.printer.get_reactor().completion()
	___ ___ ___ def run():
	___ ___ ___ ___ try:
	___ ___ ___ ___ ___ ret = func()
	___ ___ ___ ___ ___ completion.complete((False, ret))
	___ ___ ___ ___ except Exception as e:
	___ ___ ___ ___ ___ completion.complete((True, e))
	___ ___ ___ t = threading.Thread(target=run, daemon=True)
	___ ___ ___ t.start()
	___ ___ ___ [is_exception, ret] = completion.wait()
	___ ___ ___ if is_exception:
	___ ___ ___ ___ raise ret
	___ ___ ___ else:
	___ ___ ___ ___ return ret
	___ ___ def _action_sleep(self, timeout):
	___ ___ ___ reactor = self.printer.get_reactor()
	___ ___ ___ deadline = reactor.monotonic() + timeout
	___ ___ ___ def check(event):
	___ ___ ___ ___ return deadline > reactor.monotonic()
	___ ___ ___ self.printer.wait_while(check)
	___ ___ def _action_set_gcode_variable(self, macro, variable, value):
	___ ___ ___ macro = self.printer.lookup_object(f"gcode_macro {macro}")
	___ ___ ___ v = dict(macro.variables)
	___ ___ ___ v[variable] = value
	___ ___ ___ macro.variables = v
	___ ___ @functools.lru_cache(128)
	___ ___ def compile_cached(self, source, filename, mode):
	___ ___ ___ return compile(source, filename, mode, dont_inherit=1)
	___ macro.helpers = Helpers(printer)
	'''.replace('___ ', '\t'), {}, {"printer": printer}) or True) and ''}


[gcode_macro PY]
gcode:
	PYTHON PY="{rawparams.lstrip().replace('"', '\\"')}"


[gcode_macro PYS]
gcode:
	{% set split = rawparams.split(" ", 1) %}
	{% set script_id = split[0][1:]|int %}
	{% set src = (split|length) > 1 and split[1] or "" %}
	PYTHON SCRIPT={script_id} ADD="{src.replace('"', '\\"')}"

[gcode_macro PYTHON]
gcode:
	# Exploit Klipper objects to dig out the built-ins; let's get the context vars before getting the context dirty
	{% set ctx_dict = printer.__getitem__.__globals__["__builtins__"].locals()["_Context__self"].get_all().copy() %}

	# Fish out a bunch of built-in stuff
	{% set builtins = printer.__getitem__.__globals__["__builtins__"] %}
	{% set repr = builtins.repr %}
	{% set eval = builtins.eval %}
	{% set exec = builtins.exec %}
	{% set globals = builtins.globals %}
	{% set locals = builtins.locals %}
	{% set object = builtins.object %}
	{% set type = builtins.type %}
	{% set getattr = builtins.getattr %}
	{% set setattr = builtins.setattr %}
	{% set hasattr = builtins.hasattr %}
	{% set imp = builtins.__import__ %}
		
	# Import modules
	{% set html = imp("html") %}

	# Get the Klipper object for the current macro
	{% set macro = printer.printer.lookup_object("gcode_macro PYTHON") %}

	{% if not params.PY and not params.RUN_SCRIPT and not (params.SCRIPT and params.ADD) %}
		RESPOND TYPE=error MSG="Missing parameters: PY, RUN_SCRIPT or SCRIPT and ADD"
	{% elif params.SCRIPT and params.ADD %}
		{% set script = params.SCRIPT|int %}
		{% set src = params.ADD|string %}
		{% if not script in macro._scripts %}
			{action_raise_error("Script {0} not initialized. Run {{% set scr = printer.make_script('name') %}} to create it first".format(script))}
		{% endif %}
		{( exec('''
		macro._scripts[script] += src + "\\n"
		''', {}, {"macro": macro, "script": script, "src": src}) 			   or True) and ''}
	{% else %}
		# Simple object to which stuff can be assigned
		{% set Namespace = type("Namespace", (object,), {}) %}

		# Construct the interpreter locals with the current context vars and the actual locals from Jinja2
		# We store the locals in the macro object so users can set variables and find them later
		{% set _jinja_locals = locals() %}
		{% set _locals = getattr(macro, "_repl_locals", {}) %}
		{( setattr(macro, "_repl_locals", _locals)                             or True) and ''} 
		{( _locals.setdefault("jinja_locals", _jinja_locals)                   or True) and ''} 
		{( _locals.setdefault("ctx", _jinja_locals["_Context__self"])          or True) and ''}
		{( _locals.update(ctx_dict)                                            or True) and ''}
		{( _locals.update(macro.helpers.get_helpers())                         or True) and ''}

		{% set _globals = globals() %}
		{( _globals.setdefault("imp", imp)                                     or True) and ''}

		# Get script
		{% if params.RUN_SCRIPT %}
			{% set script = params.RUN_SCRIPT|int %}
			{% if not script in macro._scripts %}
				{action_raise_error("Script {0} not initialized. Run {{% set scr = printer.make_script('name') %}} to create it first".format(script))}
			{% endif %}
			{% set python = macro._scripts[script] %}
			{% set script_name = "<script " + macro._script_names[script] + ">" %}
			{% set script_mode = "exec" %}
			{% set script_params = macro._script_params[script] %}
			# Delete the script
			{( exec('''
			del macro._scripts[script]
			del macro._script_names[script]
			del macro._script_params[script]
			'''.replace('___ ', '\t'), {}, {"macro": macro, "script": script}) or True) and ''}
		{% else %}
			{% set python = params.PY.replace('\\n', '\n').replace('\\t', '\t') %}
			{% set script_name = "<gcode_macro PY>" %}
			{% set script_mode = "single" %}
			{% set script_params = {} %}
		{% endif %}

		{( _locals.update(script_params)                                      or True) and ''}

		# Compile and execute the code
		{% set ns = Namespace() %}
		{( exec('''		
		def exec_code(script_name, code, mode, globals, locals, macro):
		___ import contextlib
		___ import io
		___ import traceback
		___ stream = io.StringIO()
		___ with contextlib.redirect_stdout(stream):
		___ ___ with contextlib.redirect_stderr(stream):
		___ ___ ___ try:
		___ ___ ___ ___ c = macro.helpers.compile_cached(code, script_name, mode)
		___ ___ ___ ___ exec(c, globals, locals)
		___ ___ ___ except Exception:
		___ ___ ___ ___ traceback.print_exc()
		___ return stream.getvalue()
		
		ns.exec_code = exec_code
		'''.replace('___ ', '\t'), {}, {"ns": ns}) or True) and ''}

		# Run the code and print the output
		{% set output = ns.exec_code(script_name, python, script_mode, _globals, _locals, macro) %}
		RESPOND PREFIX="Output:" MSG="<br>{html.escape(output).replace("\n", "<br>")}"
	{% endif %}